/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.aarcangeli.esj.lexer;

/*
 * This file is compiled with JFlex into gen/com/github/aarcangeli/esj/lexer/CLexer.java
 * If you are using Intellij You can install Grammar-Kit plugin and click ctrl+shift+G
 *
 * This file is based on Scanner.l from Serious Engine
 */

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ESLexer.flex</tt>
 */
class CLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int CPPBLOCK = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\16\2\0\1\14\22\0\1\1\1\103\1\15\2\0\1\20\1\105\1\17\1\76\1\77"+
    "\1\13\1\10\1\112\1\11\1\5\1\12\1\23\2\2\1\71\6\2\1\111\1\75\1\101\1\100\1"+
    "\102\1\113\1\0\1\3\1\57\1\51\1\56\1\6\1\26\1\65\1\4\1\63\2\4\1\61\1\70\1\55"+
    "\1\60\1\67\1\4\1\62\1\53\1\52\1\73\2\4\1\64\1\74\1\4\1\107\1\0\1\110\1\106"+
    "\1\4\1\0\1\36\1\46\1\35\1\44\1\7\1\25\1\54\1\30\1\31\1\50\1\4\1\32\1\43\1"+
    "\41\1\37\1\47\1\72\1\40\1\33\1\34\1\42\1\45\1\27\1\24\1\66\1\4\1\21\1\104"+
    "\1\22\1\114\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\4\1\5\1\4\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\3\25\4\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\3\37\1\3\1\0\5\4\2\40\1\12"+
    "\1\13\1\41\1\42\1\0\7\4\1\43\13\4\1\44"+
    "\4\4\1\45\20\4\1\46\2\3\1\0\6\4\1\0"+
    "\1\3\2\4\1\47\53\4\1\50\1\51\1\4\1\40"+
    "\5\4\1\52\3\4\1\53\4\4\1\54\1\55\6\4"+
    "\1\56\1\57\2\4\1\60\1\61\2\4\1\62\10\4"+
    "\1\63\4\4\1\64\1\4\1\65\1\4\1\66\1\4"+
    "\1\67\1\70\4\4\1\71\2\4\1\72\1\73\6\4"+
    "\1\74\10\4\1\75\2\4\1\76\1\77\3\4\1\100"+
    "\10\4\1\101\1\102\1\103\6\4\1\104\1\105\14\4"+
    "\1\106\5\4\1\107\2\4\1\110\5\4\1\111\14\4"+
    "\1\112\10\4\1\113\1\114\6\4\1\115\5\4\1\116"+
    "\1\117\4\4\1\120\1\121\1\4\1\122\17\4\1\123"+
    "\1\124\1\125\2\4\1\126\11\4\1\127\1\130\12\4"+
    "\1\131\3\4\1\132\1\133\1\134\2\4\1\135\1\136"+
    "\2\4\1\137\2\4\1\140\1\4\1\141\1\4\1\142"+
    "\1\4\1\143";

  private static int [] zzUnpackAction() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\347\0\u0268\0\347\0\347\0\u02b5\0\347\0\u0302\0\u034f"+
    "\0\u039c\0\347\0\347\0\u03e9\0\u0436\0\u0483\0\u04d0\0\u051d"+
    "\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e\0\u06eb\0\u0738\0\u0785"+
    "\0\u07d2\0\u081f\0\u086c\0\u08b9\0\u0906\0\u0953\0\u09a0\0\u09ed"+
    "\0\u0a3a\0\347\0\347\0\347\0\347\0\347\0\347\0\347"+
    "\0\347\0\347\0\347\0\347\0\347\0\347\0\347\0\347"+
    "\0\347\0\347\0\u0a87\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08"+
    "\0\u0c55\0\u0ca2\0\u0cef\0\u0d3c\0\u0d89\0\347\0\347\0\347"+
    "\0\347\0\u0dd6\0\u0e23\0\u0e70\0\u0ebd\0\u0f0a\0\u0f57\0\u0fa4"+
    "\0\u0ff1\0\u021b\0\u103e\0\u108b\0\u10d8\0\u1125\0\u1172\0\u11bf"+
    "\0\u120c\0\u1259\0\u12a6\0\u12f3\0\u1340\0\u021b\0\u138d\0\u13da"+
    "\0\u1427\0\u1474\0\u021b\0\u14c1\0\u150e\0\u155b\0\u15a8\0\u15f5"+
    "\0\u1642\0\u168f\0\u16dc\0\u1729\0\u1776\0\u17c3\0\u1810\0\u185d"+
    "\0\u18aa\0\u18f7\0\u1944\0\347\0\347\0\u1991\0\u19de\0\u1a2b"+
    "\0\u1a78\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9\0\u0dd6\0\u1c46"+
    "\0\u1c93\0\u021b\0\u1ce0\0\u1d2d\0\u1d7a\0\u1dc7\0\u1e14\0\u1e61"+
    "\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u202f\0\u207c\0\u20c9"+
    "\0\u2116\0\u2163\0\u21b0\0\u21fd\0\u224a\0\u2297\0\u22e4\0\u2331"+
    "\0\u237e\0\u23cb\0\u2418\0\u2465\0\u24b2\0\u24ff\0\u254c\0\u2599"+
    "\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u271a\0\u2767\0\u27b4\0\u2801"+
    "\0\u284e\0\u289b\0\u28e8\0\u2935\0\u2982\0\u021b\0\u021b\0\u29cf"+
    "\0\347\0\u2a1c\0\u2a69\0\u2ab6\0\u2b03\0\u2b50\0\u2b9d\0\u2bea"+
    "\0\u2c37\0\u2c84\0\u021b\0\u2cd1\0\u2d1e\0\u2d6b\0\u2db8\0\u021b"+
    "\0\u021b\0\u2e05\0\u2e52\0\u2e9f\0\u2eec\0\u2f39\0\u2f86\0\u021b"+
    "\0\u021b\0\u2fd3\0\u3020\0\u021b\0\u021b\0\u306d\0\u30ba\0\u021b"+
    "\0\u3107\0\u3154\0\u31a1\0\u31ee\0\u323b\0\u3288\0\u32d5\0\u3322"+
    "\0\u021b\0\u336f\0\u33bc\0\u3409\0\u3456\0\u34a3\0\u34f0\0\u021b"+
    "\0\u353d\0\u021b\0\u358a\0\u35d7\0\u021b\0\u3624\0\u3671\0\u36be"+
    "\0\u370b\0\u021b\0\u3758\0\u37a5\0\u021b\0\u021b\0\u37f2\0\u383f"+
    "\0\u388c\0\u38d9\0\u3926\0\u3973\0\u021b\0\u39c0\0\u3a0d\0\u3a5a"+
    "\0\u3aa7\0\u3af4\0\u3b41\0\u3b8e\0\u3bdb\0\u021b\0\u3c28\0\u3c75"+
    "\0\u021b\0\u021b\0\u3cc2\0\u3d0f\0\u3d5c\0\u021b\0\u3da9\0\u3df6"+
    "\0\u3e43\0\u3e90\0\u3edd\0\u3f2a\0\u3f77\0\u3fc4\0\u021b\0\u021b"+
    "\0\u021b\0\u4011\0\u405e\0\u40ab\0\u40f8\0\u4145\0\u4192\0\u021b"+
    "\0\u021b\0\u41df\0\u422c\0\u4279\0\u42c6\0\u4313\0\u4360\0\u43ad"+
    "\0\u43fa\0\u4447\0\u4494\0\u44e1\0\u452e\0\u021b\0\u457b\0\u45c8"+
    "\0\u4615\0\u4662\0\u46af\0\u021b\0\u46fc\0\u4749\0\u021b\0\u4796"+
    "\0\u47e3\0\u4830\0\u487d\0\u48ca\0\u021b\0\u4917\0\u4964\0\u49b1"+
    "\0\u49fe\0\u4a4b\0\u4a98\0\u4ae5\0\u4b32\0\u4b7f\0\u4bcc\0\u4c19"+
    "\0\u4c66\0\u021b\0\u4cb3\0\u4d00\0\u4d4d\0\u4d9a\0\u4de7\0\u4e34"+
    "\0\u4e81\0\u4ece\0\u021b\0\u021b\0\u4f1b\0\u4f68\0\u4fb5\0\u5002"+
    "\0\u504f\0\u509c\0\u50e9\0\u5136\0\u5183\0\u51d0\0\u521d\0\u526a"+
    "\0\u021b\0\u021b\0\u52b7\0\u5304\0\u5351\0\u539e\0\u021b\0\u021b"+
    "\0\u53eb\0\u021b\0\u5438\0\u5485\0\u54d2\0\u551f\0\u556c\0\u55b9"+
    "\0\u5606\0\u5653\0\u56a0\0\u56ed\0\u573a\0\u5787\0\u57d4\0\u5821"+
    "\0\u586e\0\u021b\0\u021b\0\u021b\0\u58bb\0\u5908\0\u5955\0\u59a2"+
    "\0\u59ef\0\u5a3c\0\u5a89\0\u5ad6\0\u5b23\0\u5b70\0\u5bbd\0\u5c0a"+
    "\0\u021b\0\u021b\0\u5c57\0\u5ca4\0\u5cf1\0\u5d3e\0\u5d8b\0\u5dd8"+
    "\0\u5e25\0\u5e72\0\u5ebf\0\u5f0c\0\u021b\0\u5f59\0\u5fa6\0\u5ff3"+
    "\0\u021b\0\u021b\0\u021b\0\u6040\0\u608d\0\u021b\0\u021b\0\u60da"+
    "\0\u6127\0\u021b\0\u6174\0\u61c1\0\u021b\0\u620e\0\u021b\0\u625b"+
    "\0\u021b\0\u62a8\0\u021b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\10\1\12"+
    "\1\13\1\14\1\15\1\16\1\5\1\17\1\5\1\20"+
    "\1\21\1\22\1\23\1\24\1\10\1\25\1\26\1\27"+
    "\1\10\1\30\1\10\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\10\1\44"+
    "\1\45\1\46\5\10\1\47\2\10\1\50\1\51\5\10"+
    "\1\6\3\10\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\115\4\3\72\2\73\1\72\2\73\10\72"+
    "\1\74\3\72\45\73\1\72\3\73\20\72\116\0\1\5"+
    "\12\0\1\5\1\0\1\5\100\0\1\6\2\0\1\75"+
    "\2\76\13\0\1\6\45\0\1\6\25\0\3\10\1\0"+
    "\2\10\13\0\32\10\1\77\17\10\22\0\3\10\1\0"+
    "\2\10\13\0\52\10\22\0\3\10\1\0\2\10\13\0"+
    "\1\10\1\100\5\10\1\101\6\10\1\102\3\10\1\103"+
    "\27\10\32\0\1\104\1\105\101\0\15\17\1\106\1\0"+
    "\76\17\16\20\1\0\1\107\75\20\21\0\1\110\1\111"+
    "\74\0\1\6\2\0\1\75\2\76\13\0\1\6\1\112"+
    "\44\0\1\6\25\0\3\10\1\0\1\10\1\113\13\0"+
    "\7\10\1\114\4\10\1\115\2\10\1\116\32\10\22\0"+
    "\3\10\1\0\2\10\13\0\36\10\1\117\13\10\22\0"+
    "\3\10\1\0\2\10\13\0\5\10\1\120\5\10\1\121"+
    "\36\10\22\0\3\10\1\0\2\10\13\0\2\10\1\122"+
    "\13\10\1\123\33\10\22\0\3\10\1\0\2\10\13\0"+
    "\4\10\1\124\4\10\1\125\2\10\1\126\35\10\22\0"+
    "\3\10\1\0\1\10\1\127\13\0\5\10\1\130\44\10"+
    "\22\0\3\10\1\0\2\10\13\0\7\10\1\131\3\10"+
    "\1\132\1\133\35\10\22\0\3\10\1\0\2\10\13\0"+
    "\17\10\1\134\32\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\135\4\10\1\136\33\10\22\0\3\10\1\0"+
    "\1\10\1\137\13\0\52\10\22\0\3\10\1\0\2\10"+
    "\13\0\13\10\1\140\36\10\22\0\3\10\1\0\2\10"+
    "\13\0\10\10\1\141\41\10\22\0\3\10\1\0\2\10"+
    "\13\0\14\10\1\142\35\10\22\0\3\10\1\0\2\10"+
    "\13\0\14\10\1\143\35\10\22\0\3\10\1\0\2\10"+
    "\13\0\6\10\1\144\5\10\1\145\35\10\22\0\3\10"+
    "\1\0\2\10\13\0\13\10\1\146\1\10\1\147\34\10"+
    "\22\0\3\10\1\0\2\10\13\0\17\10\1\150\32\10"+
    "\22\0\1\10\1\151\1\10\1\0\1\152\1\10\13\0"+
    "\27\10\1\153\1\154\4\10\1\155\6\10\1\156\1\157"+
    "\4\10\22\0\3\10\1\0\2\10\13\0\35\10\1\160"+
    "\14\10\22\0\1\10\1\161\1\10\1\0\2\10\13\0"+
    "\52\10\22\0\3\10\1\0\2\10\13\0\32\10\1\162"+
    "\3\10\1\163\13\10\22\0\3\73\1\0\2\73\13\0"+
    "\52\73\42\0\1\164\74\0\1\75\3\0\2\76\13\0"+
    "\1\75\1\0\2\165\42\0\1\75\25\0\1\166\5\0"+
    "\2\167\11\0\1\166\45\0\1\166\25\0\3\10\1\0"+
    "\2\10\13\0\40\10\1\170\1\10\1\171\7\10\22\0"+
    "\3\10\1\0\2\10\13\0\24\10\1\172\25\10\22\0"+
    "\3\10\1\0\2\10\13\0\10\10\1\173\41\10\22\0"+
    "\3\10\1\0\2\10\13\0\17\10\1\174\32\10\22\0"+
    "\3\10\1\0\1\10\1\175\13\0\52\10\20\0\14\104"+
    "\1\0\1\104\1\0\76\104\13\105\1\176\101\105\2\0"+
    "\2\177\2\0\2\177\13\0\1\177\1\0\2\177\6\0"+
    "\2\177\5\0\1\177\1\0\1\177\2\0\1\177\4\0"+
    "\2\177\11\0\1\177\25\0\3\10\1\0\2\10\13\0"+
    "\13\10\1\200\36\10\22\0\3\10\1\0\2\10\13\0"+
    "\13\10\1\201\36\10\22\0\3\10\1\0\2\10\13\0"+
    "\15\10\1\202\34\10\22\0\3\10\1\0\2\10\13\0"+
    "\16\10\1\203\33\10\22\0\3\10\1\0\2\10\13\0"+
    "\35\10\1\204\14\10\22\0\3\10\1\0\2\10\13\0"+
    "\6\10\1\205\43\10\22\0\3\10\1\0\2\10\13\0"+
    "\6\10\1\206\43\10\22\0\3\10\1\0\2\10\13\0"+
    "\7\10\1\207\42\10\22\0\3\10\1\0\2\10\13\0"+
    "\6\10\1\210\43\10\22\0\3\10\1\0\2\10\13\0"+
    "\13\10\1\211\1\212\35\10\22\0\3\10\1\0\2\10"+
    "\13\0\17\10\1\213\32\10\22\0\3\10\1\0\2\10"+
    "\13\0\1\10\1\214\50\10\22\0\3\10\1\0\2\10"+
    "\13\0\17\10\1\215\32\10\22\0\3\10\1\0\2\10"+
    "\13\0\13\10\1\216\36\10\22\0\3\10\1\0\2\10"+
    "\13\0\7\10\1\217\1\220\41\10\22\0\3\10\1\0"+
    "\2\10\13\0\16\10\1\221\1\10\1\222\31\10\22\0"+
    "\3\10\1\0\2\10\13\0\11\10\1\223\40\10\22\0"+
    "\3\10\1\0\2\10\13\0\5\10\1\224\44\10\22\0"+
    "\3\10\1\0\2\10\13\0\10\10\1\225\1\226\40\10"+
    "\22\0\3\10\1\0\2\10\13\0\20\10\1\227\31\10"+
    "\22\0\3\10\1\0\1\10\1\230\13\0\52\10\22\0"+
    "\3\10\1\0\2\10\13\0\21\10\1\231\30\10\22\0"+
    "\3\10\1\0\2\10\13\0\15\10\1\232\34\10\22\0"+
    "\3\10\1\0\2\10\13\0\6\10\1\233\43\10\22\0"+
    "\3\10\1\0\2\10\13\0\10\10\1\234\41\10\22\0"+
    "\3\10\1\0\2\10\13\0\14\10\1\235\35\10\22\0"+
    "\3\10\1\0\2\10\13\0\20\10\1\236\31\10\22\0"+
    "\3\10\1\0\2\10\13\0\16\10\1\237\33\10\22\0"+
    "\3\10\1\0\2\10\13\0\16\10\1\240\33\10\22\0"+
    "\3\10\1\0\2\10\13\0\3\10\1\241\24\10\1\242"+
    "\21\10\22\0\3\10\1\0\2\10\13\0\14\10\1\243"+
    "\35\10\22\0\3\10\1\0\2\10\13\0\36\10\1\244"+
    "\13\10\22\0\3\10\1\0\2\10\13\0\7\10\1\245"+
    "\42\10\22\0\3\10\1\0\2\10\13\0\14\10\1\246"+
    "\35\10\22\0\3\10\1\0\2\10\13\0\35\10\1\247"+
    "\14\10\22\0\3\10\1\0\2\10\13\0\32\10\1\250"+
    "\17\10\22\0\3\10\1\0\2\10\13\0\33\10\1\251"+
    "\16\10\22\0\3\10\1\0\2\10\13\0\36\10\1\252"+
    "\13\10\22\0\1\166\20\0\1\166\1\0\2\165\42\0"+
    "\1\166\25\0\1\166\20\0\1\166\45\0\1\166\25\0"+
    "\3\10\1\0\2\10\13\0\45\10\1\253\4\10\22\0"+
    "\3\10\1\0\2\10\13\0\36\10\1\254\13\10\22\0"+
    "\3\10\1\0\2\10\13\0\14\10\1\255\35\10\22\0"+
    "\3\10\1\0\1\10\1\256\13\0\52\10\22\0\3\10"+
    "\1\0\2\10\13\0\20\10\1\257\31\10\22\0\3\10"+
    "\1\0\2\10\13\0\16\10\1\260\33\10\20\0\12\105"+
    "\1\261\1\176\101\105\2\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\262\40\10\22\0\3\10\1\0\2\10\13\0"+
    "\31\10\1\263\20\10\22\0\3\10\1\0\2\10\13\0"+
    "\12\10\1\264\37\10\22\0\1\10\1\265\1\10\1\0"+
    "\2\10\13\0\52\10\22\0\3\10\1\0\2\10\13\0"+
    "\7\10\1\266\42\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\267\40\10\22\0\3\10\1\0\2\10\13\0"+
    "\6\10\1\270\43\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\271\40\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\272\40\10\22\0\3\10\1\0\2\10\13\0"+
    "\24\10\1\273\25\10\22\0\3\10\1\0\2\10\13\0"+
    "\16\10\1\274\33\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\275\40\10\22\0\3\10\1\0\2\10\13\0"+
    "\20\10\1\276\31\10\22\0\3\10\1\0\2\10\13\0"+
    "\10\10\1\277\41\10\22\0\3\10\1\0\2\10\13\0"+
    "\7\10\1\300\42\10\22\0\3\10\1\0\1\10\1\301"+
    "\13\0\52\10\22\0\3\10\1\0\2\10\13\0\10\10"+
    "\1\302\41\10\22\0\3\10\1\0\2\10\13\0\24\10"+
    "\1\303\25\10\22\0\3\10\1\0\2\10\13\0\14\10"+
    "\1\304\35\10\22\0\3\10\1\0\1\10\1\305\13\0"+
    "\52\10\22\0\3\10\1\0\2\10\13\0\17\10\1\306"+
    "\32\10\22\0\3\10\1\0\2\10\13\0\17\10\1\307"+
    "\32\10\22\0\3\10\1\0\1\10\1\310\13\0\52\10"+
    "\22\0\3\10\1\0\2\10\13\0\10\10\1\311\41\10"+
    "\22\0\3\10\1\0\1\10\1\312\13\0\52\10\22\0"+
    "\3\10\1\0\2\10\13\0\11\10\1\313\40\10\22\0"+
    "\3\10\1\0\2\10\13\0\21\10\1\314\30\10\22\0"+
    "\3\10\1\0\2\10\13\0\10\10\1\315\41\10\22\0"+
    "\3\10\1\0\2\10\13\0\12\10\1\316\11\10\1\317"+
    "\25\10\22\0\3\10\1\0\2\10\13\0\24\10\1\320"+
    "\25\10\22\0\3\10\1\0\2\10\13\0\6\10\1\321"+
    "\43\10\22\0\3\10\1\0\2\10\13\0\11\10\1\322"+
    "\40\10\22\0\3\10\1\0\2\10\13\0\6\10\1\323"+
    "\43\10\22\0\3\10\1\0\2\10\13\0\11\10\1\324"+
    "\40\10\22\0\3\10\1\0\2\10\13\0\17\10\1\325"+
    "\32\10\22\0\3\10\1\0\2\10\13\0\35\10\1\326"+
    "\14\10\22\0\3\10\1\0\2\10\13\0\13\10\1\327"+
    "\36\10\22\0\3\10\1\0\2\10\13\0\21\10\1\330"+
    "\30\10\22\0\3\10\1\0\2\10\13\0\36\10\1\331"+
    "\13\10\22\0\3\10\1\0\2\10\13\0\42\10\1\332"+
    "\7\10\22\0\3\10\1\0\1\333\1\10\13\0\52\10"+
    "\22\0\3\10\1\0\2\10\13\0\50\10\1\334\1\10"+
    "\22\0\1\10\1\335\1\10\1\0\2\10\13\0\52\10"+
    "\22\0\3\10\1\0\1\336\1\10\13\0\52\10\22\0"+
    "\3\10\1\0\2\10\13\0\15\10\1\337\34\10\22\0"+
    "\3\10\1\0\2\10\13\0\11\10\1\340\40\10\22\0"+
    "\3\10\1\0\2\10\13\0\17\10\1\341\32\10\22\0"+
    "\3\10\1\0\2\10\13\0\10\10\1\342\41\10\22\0"+
    "\3\10\1\0\2\10\13\0\11\10\1\343\40\10\22\0"+
    "\3\10\1\0\2\10\13\0\27\10\1\344\22\10\22\0"+
    "\3\10\1\0\1\10\1\345\13\0\52\10\22\0\3\10"+
    "\1\0\1\10\1\346\13\0\52\10\22\0\3\10\1\0"+
    "\2\10\13\0\16\10\1\347\33\10\22\0\3\10\1\0"+
    "\2\10\13\0\12\10\1\350\37\10\22\0\3\10\1\0"+
    "\2\10\13\0\6\10\1\351\43\10\22\0\3\10\1\0"+
    "\2\10\13\0\21\10\1\352\30\10\22\0\3\10\1\0"+
    "\2\10\13\0\17\10\1\353\32\10\22\0\3\10\1\0"+
    "\2\10\13\0\23\10\1\354\26\10\22\0\3\10\1\0"+
    "\2\10\13\0\10\10\1\355\41\10\22\0\3\10\1\0"+
    "\2\10\13\0\11\10\1\356\40\10\22\0\3\10\1\0"+
    "\2\10\13\0\14\10\1\357\35\10\22\0\3\10\1\0"+
    "\2\10\13\0\4\10\1\360\5\10\1\361\37\10\22\0"+
    "\3\10\1\0\2\10\13\0\15\10\1\362\34\10\22\0"+
    "\3\10\1\0\2\10\13\0\20\10\1\363\31\10\22\0"+
    "\3\10\1\0\2\10\13\0\15\10\1\364\34\10\22\0"+
    "\3\10\1\0\2\10\13\0\7\10\1\365\42\10\22\0"+
    "\3\10\1\0\2\10\13\0\17\10\1\366\32\10\22\0"+
    "\3\10\1\0\1\10\1\367\13\0\52\10\22\0\3\10"+
    "\1\0\1\10\1\370\13\0\52\10\22\0\3\10\1\0"+
    "\2\10\13\0\20\10\1\371\31\10\22\0\3\10\1\0"+
    "\2\10\13\0\6\10\1\372\43\10\22\0\3\10\1\0"+
    "\2\10\13\0\7\10\1\373\42\10\22\0\3\10\1\0"+
    "\2\10\13\0\15\10\1\374\34\10\22\0\3\10\1\0"+
    "\2\10\13\0\16\10\1\375\33\10\22\0\3\10\1\0"+
    "\2\10\13\0\37\10\1\376\12\10\22\0\3\10\1\0"+
    "\2\10\13\0\12\10\1\377\37\10\22\0\3\10\1\0"+
    "\1\10\1\u0100\13\0\52\10\22\0\3\10\1\0\1\u0101"+
    "\1\10\13\0\52\10\22\0\3\10\1\0\2\10\13\0"+
    "\41\10\1\u0102\10\10\22\0\3\10\1\0\2\10\13\0"+
    "\45\10\1\u0103\4\10\22\0\3\10\1\0\2\10\13\0"+
    "\27\10\1\u0104\22\10\22\0\3\10\1\0\2\10\13\0"+
    "\46\10\1\u0105\3\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u0106\40\10\22\0\3\10\1\0\2\10\13\0"+
    "\15\10\1\u0107\34\10\22\0\3\10\1\0\2\10\13\0"+
    "\6\10\1\u0108\43\10\22\0\3\10\1\0\2\10\13\0"+
    "\13\10\1\u0109\4\10\1\u010a\3\10\1\u010b\21\10\1\u010c"+
    "\1\u010d\2\10\22\0\3\10\1\0\2\10\13\0\22\10"+
    "\1\u010e\27\10\22\0\3\10\1\0\1\10\1\u010f\13\0"+
    "\52\10\22\0\3\10\1\0\2\10\13\0\5\10\1\u0110"+
    "\44\10\22\0\3\10\1\0\2\10\13\0\12\10\1\u0111"+
    "\37\10\22\0\3\10\1\0\2\10\13\0\15\10\1\u0112"+
    "\34\10\22\0\3\10\1\0\2\10\13\0\16\10\1\u0113"+
    "\33\10\22\0\3\10\1\0\2\10\13\0\16\10\1\u0114"+
    "\33\10\22\0\3\10\1\0\2\10\13\0\13\10\1\u0115"+
    "\36\10\22\0\3\10\1\0\2\10\13\0\13\10\1\u0116"+
    "\36\10\22\0\3\10\1\0\2\10\13\0\4\10\1\u0117"+
    "\45\10\22\0\3\10\1\0\1\10\1\u0118\13\0\52\10"+
    "\22\0\3\10\1\0\2\10\13\0\16\10\1\u0119\33\10"+
    "\22\0\3\10\1\0\2\10\13\0\13\10\1\u011a\36\10"+
    "\22\0\3\10\1\0\2\10\13\0\21\10\1\u011b\30\10"+
    "\22\0\3\10\1\0\2\10\13\0\15\10\1\u011c\34\10"+
    "\22\0\3\10\1\0\2\10\13\0\35\10\1\u011d\14\10"+
    "\22\0\3\10\1\0\2\10\13\0\11\10\1\u011e\40\10"+
    "\22\0\3\10\1\0\1\10\1\u011f\13\0\52\10\22\0"+
    "\3\10\1\0\2\10\13\0\6\10\1\u0120\43\10\22\0"+
    "\3\10\1\0\2\10\13\0\21\10\1\u0121\30\10\22\0"+
    "\3\10\1\0\1\10\1\u0122\13\0\52\10\22\0\3\10"+
    "\1\0\2\10\13\0\7\10\1\u0123\42\10\22\0\3\10"+
    "\1\0\2\10\13\0\40\10\1\u0124\11\10\22\0\3\10"+
    "\1\0\2\10\13\0\40\10\1\u0125\11\10\22\0\3\10"+
    "\1\0\2\10\13\0\33\10\1\u0126\16\10\22\0\3\10"+
    "\1\0\1\10\1\u0127\13\0\52\10\22\0\3\10\1\0"+
    "\2\10\13\0\14\10\1\u0128\35\10\22\0\3\10\1\0"+
    "\2\10\13\0\13\10\1\u0129\36\10\22\0\3\10\1\0"+
    "\2\10\13\0\13\10\1\u012a\36\10\22\0\3\10\1\0"+
    "\2\10\13\0\7\10\1\u012b\42\10\22\0\3\10\1\0"+
    "\2\10\13\0\33\10\1\u012c\16\10\22\0\3\10\1\0"+
    "\2\10\13\0\17\10\1\u012d\32\10\22\0\3\10\1\0"+
    "\1\10\1\u012e\13\0\52\10\22\0\3\10\1\0\1\10"+
    "\1\u012f\13\0\52\10\22\0\3\10\1\0\2\10\13\0"+
    "\13\10\1\u0130\36\10\22\0\3\10\1\0\1\10\1\u0131"+
    "\13\0\52\10\22\0\3\10\1\0\2\10\13\0\6\10"+
    "\1\u0132\43\10\22\0\3\10\1\0\2\10\13\0\7\10"+
    "\1\u0133\42\10\22\0\3\10\1\0\2\10\13\0\6\10"+
    "\1\u0134\43\10\22\0\3\10\1\0\2\10\13\0\7\10"+
    "\1\u0135\42\10\22\0\3\10\1\0\2\10\13\0\17\10"+
    "\1\u0136\32\10\22\0\3\10\1\0\2\10\13\0\11\10"+
    "\1\u0137\40\10\22\0\3\10\1\0\2\10\13\0\23\10"+
    "\1\u0138\26\10\22\0\3\10\1\0\2\10\13\0\43\10"+
    "\1\u0139\6\10\22\0\3\10\1\0\2\10\13\0\32\10"+
    "\1\u013a\17\10\22\0\3\10\1\0\2\10\13\0\16\10"+
    "\1\u013b\33\10\22\0\3\10\1\0\2\10\13\0\35\10"+
    "\1\u013c\14\10\22\0\3\10\1\0\2\10\13\0\20\10"+
    "\1\u013d\31\10\22\0\3\10\1\0\2\10\13\0\35\10"+
    "\1\u013e\2\10\1\u013f\11\10\22\0\3\10\1\0\2\10"+
    "\13\0\32\10\1\u0140\17\10\22\0\3\10\1\0\2\10"+
    "\13\0\35\10\1\u0141\14\10\22\0\3\10\1\0\2\10"+
    "\13\0\10\10\1\u0142\41\10\22\0\3\10\1\0\2\10"+
    "\13\0\16\10\1\u0143\33\10\22\0\3\10\1\0\2\10"+
    "\13\0\23\10\1\u0144\26\10\22\0\3\10\1\0\2\10"+
    "\13\0\11\10\1\u0145\40\10\22\0\3\10\1\0\2\10"+
    "\13\0\13\10\1\u0146\36\10\22\0\3\10\1\0\2\10"+
    "\13\0\13\10\1\u0147\36\10\22\0\3\10\1\0\2\10"+
    "\13\0\16\10\1\u0148\33\10\22\0\3\10\1\0\2\10"+
    "\13\0\6\10\1\u0149\43\10\22\0\3\10\1\0\2\10"+
    "\13\0\16\10\1\u014a\33\10\22\0\3\10\1\0\2\10"+
    "\13\0\11\10\1\u014b\40\10\22\0\3\10\1\0\2\10"+
    "\13\0\7\10\1\u014c\42\10\22\0\3\10\1\0\2\10"+
    "\13\0\10\10\1\u014d\41\10\22\0\3\10\1\0\2\10"+
    "\13\0\15\10\1\u014e\34\10\22\0\3\10\1\0\2\10"+
    "\13\0\6\10\1\u014f\43\10\22\0\3\10\1\0\2\10"+
    "\13\0\25\10\1\u0150\24\10\22\0\3\10\1\0\2\10"+
    "\13\0\44\10\1\u0151\5\10\22\0\3\10\1\0\2\10"+
    "\13\0\13\10\1\u0152\36\10\22\0\3\10\1\0\2\10"+
    "\13\0\31\10\1\u0153\20\10\22\0\3\10\1\0\2\10"+
    "\13\0\23\10\1\u0154\26\10\22\0\3\10\1\0\1\10"+
    "\1\u0155\13\0\52\10\22\0\3\10\1\0\2\10\13\0"+
    "\23\10\1\u0156\26\10\22\0\3\10\1\0\2\10\13\0"+
    "\16\10\1\u0157\33\10\22\0\1\10\1\u0158\1\10\1\0"+
    "\2\10\13\0\52\10\22\0\3\10\1\0\2\10\13\0"+
    "\32\10\1\u0159\17\10\22\0\3\10\1\0\2\10\13\0"+
    "\10\10\1\u015a\41\10\22\0\3\10\1\0\2\10\13\0"+
    "\23\10\1\u015b\26\10\22\0\3\10\1\0\2\10\13\0"+
    "\15\10\1\u015c\34\10\22\0\3\10\1\0\2\10\13\0"+
    "\16\10\1\u015d\33\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u015e\40\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u015f\40\10\22\0\3\10\1\0\2\10\13\0"+
    "\7\10\1\u0160\42\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u0161\40\10\22\0\3\10\1\0\1\10\1\u0162"+
    "\13\0\52\10\22\0\3\10\1\0\1\10\1\u0163\13\0"+
    "\52\10\22\0\3\10\1\0\1\10\1\u0164\13\0\52\10"+
    "\22\0\3\10\1\0\1\10\1\u0165\13\0\52\10\22\0"+
    "\3\10\1\0\2\10\13\0\14\10\1\u0166\35\10\22\0"+
    "\3\10\1\0\2\10\13\0\20\10\1\u0167\31\10\22\0"+
    "\3\10\1\0\2\10\13\0\27\10\1\u0168\22\10\22\0"+
    "\3\10\1\0\2\10\13\0\25\10\1\u0169\24\10\22\0"+
    "\3\10\1\0\2\10\13\0\16\10\1\u016a\33\10\22\0"+
    "\3\10\1\0\2\10\13\0\25\10\1\u016b\24\10\22\0"+
    "\3\10\1\0\2\10\13\0\10\10\1\u016c\41\10\22\0"+
    "\3\10\1\0\2\10\13\0\27\10\1\u016d\22\10\22\0"+
    "\3\10\1\0\2\10\13\0\14\10\1\u016e\35\10\22\0"+
    "\3\10\1\0\2\10\13\0\6\10\1\u016f\43\10\22\0"+
    "\3\10\1\0\1\10\1\u0170\13\0\52\10\22\0\3\10"+
    "\1\0\2\10\13\0\46\10\1\u0171\3\10\22\0\3\10"+
    "\1\0\2\10\13\0\10\10\1\u0172\41\10\22\0\3\10"+
    "\1\0\2\10\13\0\10\10\1\u0173\41\10\22\0\3\10"+
    "\1\0\2\10\13\0\10\10\1\u0174\41\10\22\0\3\10"+
    "\1\0\2\10\13\0\12\10\1\u0175\37\10\22\0\3\10"+
    "\1\0\2\10\13\0\6\10\1\u0176\43\10\22\0\3\10"+
    "\1\0\1\10\1\u0177\13\0\52\10\22\0\3\10\1\0"+
    "\2\10\13\0\15\10\1\u0178\34\10\22\0\3\10\1\0"+
    "\1\10\1\u0179\13\0\52\10\22\0\3\10\1\0\2\10"+
    "\13\0\11\10\1\u017a\40\10\22\0\3\10\1\0\1\10"+
    "\1\u017b\13\0\52\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u017c\40\10\22\0\3\10\1\0\2\10\13\0"+
    "\40\10\1\u017d\11\10\22\0\3\10\1\0\2\10\13\0"+
    "\1\10\1\u017e\50\10\22\0\3\10\1\0\2\10\13\0"+
    "\1\10\1\u017f\50\10\22\0\3\10\1\0\2\10\13\0"+
    "\46\10\1\u0180\3\10\22\0\3\10\1\0\2\10\13\0"+
    "\33\10\1\u0181\16\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u0182\40\10\22\0\3\10\1\0\2\10\13\0"+
    "\16\10\1\u0183\33\10\22\0\3\10\1\0\2\10\13\0"+
    "\32\10\1\u0184\17\10\22\0\3\10\1\0\2\10\13\0"+
    "\13\10\1\u0185\36\10\22\0\3\10\1\0\2\10\13\0"+
    "\12\10\1\u0186\37\10\22\0\3\10\1\0\2\10\13\0"+
    "\46\10\1\u0187\3\10\22\0\3\10\1\0\2\10\13\0"+
    "\12\10\1\u0188\37\10\22\0\3\10\1\0\2\10\13\0"+
    "\13\10\1\u0189\36\10\22\0\3\10\1\0\2\10\13\0"+
    "\35\10\1\u018a\14\10\22\0\3\10\1\0\2\10\13\0"+
    "\46\10\1\u018b\3\10\22\0\3\10\1\0\2\10\13\0"+
    "\46\10\1\u018c\3\10\22\0\3\10\1\0\2\10\13\0"+
    "\33\10\1\u018d\16\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u018e\40\10\22\0\3\10\1\0\2\10\13\0"+
    "\14\10\1\u018f\35\10\22\0\3\10\1\0\2\10\13\0"+
    "\16\10\1\u0190\33\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u0191\40\10\22\0\3\10\1\0\2\10\13\0"+
    "\33\10\1\u0192\16\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u0193\40\10\22\0\3\10\1\0\2\10\13\0"+
    "\16\10\1\u0194\33\10\22\0\3\10\1\0\2\10\13\0"+
    "\32\10\1\u0195\17\10\22\0\3\10\1\0\2\10\13\0"+
    "\33\10\1\u0196\16\10\22\0\3\10\1\0\2\10\13\0"+
    "\33\10\1\u0197\16\10\22\0\3\10\1\0\1\10\1\u0198"+
    "\13\0\52\10\22\0\3\10\1\0\2\10\13\0\33\10"+
    "\1\u0199\16\10\22\0\3\10\1\0\2\10\13\0\10\10"+
    "\1\u019a\41\10\22\0\3\10\1\0\2\10\13\0\12\10"+
    "\1\u019b\37\10\22\0\3\10\1\0\2\10\13\0\27\10"+
    "\1\u019c\22\10\22\0\3\10\1\0\2\10\13\0\15\10"+
    "\1\u019d\34\10\22\0\3\10\1\0\1\10\1\u019e\13\0"+
    "\52\10\22\0\3\10\1\0\1\10\1\u019f\13\0\52\10"+
    "\22\0\3\10\1\0\2\10\13\0\51\10\1\u01a0\22\0"+
    "\3\10\1\0\2\10\13\0\24\10\1\u01a1\25\10\22\0"+
    "\3\10\1\0\2\10\13\0\44\10\1\u01a2\5\10\22\0"+
    "\3\10\1\0\1\u01a3\1\10\13\0\52\10\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25333];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\1\1\2\11\1\1\1\11"+
    "\3\1\2\11\26\1\21\11\3\1\1\0\7\1\4\11"+
    "\1\0\51\1\2\11\1\1\1\0\6\1\1\0\62\1"+
    "\1\11\362\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case CPPBLOCK: {
              yybegin(YYINITIAL); return CTokens.CPP_BLOCK;
            }  // fall though
            case 420: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 100: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 101: break;
          case 3: 
            { return CTokens.C_INT;
            } 
            // fall through
          case 102: break;
          case 4: 
            { return CTokens.IDENTIFIER;
            } 
            // fall through
          case 103: break;
          case 5: 
            { return CTokens.DOT;
            } 
            // fall through
          case 104: break;
          case 6: 
            { return CTokens.PLUS;
            } 
            // fall through
          case 105: break;
          case 7: 
            { return CTokens.MINUS;
            } 
            // fall through
          case 106: break;
          case 8: 
            { return CTokens.DIV;
            } 
            // fall through
          case 107: break;
          case 9: 
            { return CTokens.ASTERISK;
            } 
            // fall through
          case 108: break;
          case 10: 
            { return CTokens.C_STRING;
            } 
            // fall through
          case 109: break;
          case 11: 
            { return CTokens.C_CHAR;
            } 
            // fall through
          case 110: break;
          case 12: 
            { return CTokens.PERC;
            } 
            // fall through
          case 111: break;
          case 13: 
            { return CTokens.LBRACE;
            } 
            // fall through
          case 112: break;
          case 14: 
            { return CTokens.RBRACE;
            } 
            // fall through
          case 113: break;
          case 15: 
            { return CTokens.SEMICOLON;
            } 
            // fall through
          case 114: break;
          case 16: 
            { return CTokens.LPARENTH;
            } 
            // fall through
          case 115: break;
          case 17: 
            { return CTokens.RPARENTH;
            } 
            // fall through
          case 116: break;
          case 18: 
            { return CTokens.EQ;
            } 
            // fall through
          case 117: break;
          case 19: 
            { return CTokens.LT;
            } 
            // fall through
          case 118: break;
          case 20: 
            { return CTokens.GT;
            } 
            // fall through
          case 119: break;
          case 21: 
            { return CTokens.EXCL;
            } 
            // fall through
          case 120: break;
          case 22: 
            { return CTokens.OR;
            } 
            // fall through
          case 121: break;
          case 23: 
            { return CTokens.AND;
            } 
            // fall through
          case 122: break;
          case 24: 
            { return CTokens.XOR;
            } 
            // fall through
          case 123: break;
          case 25: 
            { return CTokens.LBRACKET;
            } 
            // fall through
          case 124: break;
          case 26: 
            { return CTokens.RBRACKET;
            } 
            // fall through
          case 125: break;
          case 27: 
            { return CTokens.COLON;
            } 
            // fall through
          case 126: break;
          case 28: 
            { return CTokens.COMMA;
            } 
            // fall through
          case 127: break;
          case 29: 
            { return CTokens.QUEST;
            } 
            // fall through
          case 128: break;
          case 30: 
            { return CTokens.TILDE;
            } 
            // fall through
          case 129: break;
          case 31: 
            { 
            } 
            // fall through
          case 130: break;
          case 32: 
            { return CTokens.COMMENT;
            } 
            // fall through
          case 131: break;
          case 33: 
            { yybegin(CPPBLOCK); return CTokens.CPP_BLOCK_BEGIN;
            } 
            // fall through
          case 132: break;
          case 34: 
            { return CTokens.CPP_BLOCK_END;
            } 
            // fall through
          case 133: break;
          case 35: 
            { return CTokens.K_IF;
            } 
            // fall through
          case 134: break;
          case 36: 
            { return CTokens.K_ON;
            } 
            // fall through
          case 135: break;
          case 37: 
            { return CTokens.K_DO;
            } 
            // fall through
          case 136: break;
          case 38: 
            { yybegin(YYINITIAL); yypushback(yylength()); return CTokens.CPP_BLOCK;
            } 
            // fall through
          case 137: break;
          case 39: 
            { return CTokens.K_FOR;
            } 
            // fall through
          case 138: break;
          case 40: 
            { return CTokens.K_ELSE;
            } 
            // fall through
          case 139: break;
          case 41: 
            { return CTokens.K_ENUM;
            } 
            // fall through
          case 140: break;
          case 42: 
            { return CTokens.K_WAIT;
            } 
            // fall through
          case 141: break;
          case 43: 
            { return CTokens.K_STOP;
            } 
            // fall through
          case 142: break;
          case 44: 
            { return CTokens.K_CALL;
            } 
            // fall through
          case 143: break;
          case 45: 
            { return CTokens.K_CASE;
            } 
            // fall through
          case 144: break;
          case 46: 
            { return CTokens.K_NAME;
            } 
            // fall through
          case 145: break;
          case 47: 
            { return CTokens.K_USES;
            } 
            // fall through
          case 146: break;
          case 48: 
            { return CTokens.K_VOID;
            } 
            // fall through
          case 147: break;
          case 49: 
            { return CTokens.K_PASS;
            } 
            // fall through
          case 148: break;
          case 50: 
            { return CTokens.K_JUMP;
            } 
            // fall through
          case 149: break;
          case 51: 
            { return CTokens.K_BOOL;
            } 
            // fall through
          case 150: break;
          case 52: 
            { return CTokens.K_ANGLE;
            } 
            // fall through
          case 151: break;
          case 53: 
            { return CTokens.K_EVENT;
            } 
            // fall through
          case 152: break;
          case 54: 
            { return CTokens.K_FLAGS;
            } 
            // fall through
          case 153: break;
          case 55: 
            { return CTokens.K_FLOAT;
            } 
            // fall through
          case 154: break;
          case 56: 
            { return CTokens.K_WHILE;
            } 
            // fall through
          case 155: break;
          case 57: 
            { return CTokens.K_SOUND;
            } 
            // fall through
          case 156: break;
          case 58: 
            { return CTokens.K_CLASS;
            } 
            // fall through
          case 157: break;
          case 59: 
            { return CTokens.K_CONST;
            } 
            // fall through
          case 158: break;
          case 60: 
            { return CTokens.K_MODEL;
            } 
            // fall through
          case 159: break;
          case 61: 
            { return CTokens.K_COLOR;
            } 
            // fall through
          case 160: break;
          case 62: 
            { return CTokens.K_RANGE;
            } 
            // fall through
          case 161: break;
          case 63: 
            { return CTokens.K_INDEX;
            } 
            // fall through
          case 162: break;
          case 64: 
            { return CTokens.K_EXPORT;
            } 
            // fall through
          case 163: break;
          case 65: 
            { return CTokens.K_INLINE;
            } 
            // fall through
          case 164: break;
          case 66: 
            { return CTokens.K_SWITCH;
            } 
            // fall through
          case 165: break;
          case 67: 
            { return CTokens.K_STATIC;
            } 
            // fall through
          case 166: break;
          case 68: 
            { return CTokens.K_RESUME;
            } 
            // fall through
          case 167: break;
          case 69: 
            { return CTokens.K_RETURN;
            } 
            // fall through
          case 168: break;
          case 70: 
            { return CTokens.K_ANGLE3D;
            } 
            // fall through
          case 169: break;
          case 71: 
            { return CTokens.K_FLOAT3D;
            } 
            // fall through
          case 170: break;
          case 72: 
            { return CTokens.K_TEXTURE;
            } 
            // fall through
          case 171: break;
          case 73: 
            { return CTokens.K_VIRTUAL;
            } 
            // fall through
          case 172: break;
          case 74: 
            { return CTokens.K_FEATURES;
            } 
            // fall through
          case 173: break;
          case 75: 
            { return CTokens.K_AUTOWAIT;
            } 
            // fall through
          case 174: break;
          case 76: 
            { return CTokens.K_AUTOCALL;
            } 
            // fall through
          case 175: break;
          case 77: 
            { return CTokens.K_CTSTRING;
            } 
            // fall through
          case 176: break;
          case 78: 
            { return CTokens.K_ANIMATION;
            } 
            // fall through
          case 177: break;
          case 79: 
            { return CTokens.K_FUNCTIONS;
            } 
            // fall through
          case 178: break;
          case 80: 
            { return CTokens.K_WAITEVENT;
            } 
            // fall through
          case 179: break;
          case 81: 
            { return CTokens.K_THUMBNAIL;
            } 
            // fall through
          case 180: break;
          case 82: 
            { return CTokens.K_OTHERWISE;
            } 
            // fall through
          case 181: break;
          case 83: 
            { return CTokens.K_COMPONENTS;
            } 
            // fall through
          case 182: break;
          case 84: 
            { return CTokens.K_PROCEDURES;
            } 
            // fall through
          case 183: break;
          case 85: 
            { return CTokens.K_PROPERTIES;
            } 
            // fall through
          case 184: break;
          case 86: 
            { return CTokens.K_CTFILENAME;
            } 
            // fall through
          case 185: break;
          case 87: 
            { return CTokens.K_FLOATQUAT3D;
            } 
            // fall through
          case 186: break;
          case 88: 
            { return CTokens.K_CANIMOBJECT;
            } 
            // fall through
          case 187: break;
          case 89: 
            { return CTokens.K_FLOATPLANE3D;
            } 
            // fall through
          case 188: break;
          case 90: 
            { return CTokens.K_CSOUNDOBJECT;
            } 
            // fall through
          case 189: break;
          case 91: 
            { return CTokens.K_CPLACEMENT3D;
            } 
            // fall through
          case 190: break;
          case 92: 
            { return CTokens.K_CMODELOBJECT;
            } 
            // fall through
          case 191: break;
          case 93: 
            { return CTokens.K_FLOATAABBOX3D;
            } 
            // fall through
          case 192: break;
          case 94: 
            { return CTokens.K_FLOATMATRIX3D;
            } 
            // fall through
          case 193: break;
          case 95: 
            { return CTokens.K_CTSTRINGTRANS;
            } 
            // fall through
          case 194: break;
          case 96: 
            { return CTokens.K_CENTITYPOINTER;
            } 
            // fall through
          case 195: break;
          case 97: 
            { return CTokens.K_CMODELINSTANCE;
            } 
            // fall through
          case 196: break;
          case 98: 
            { return CTokens.K_CTFILENAMENODEP;
            } 
            // fall through
          case 197: break;
          case 99: 
            { return CTokens.K_ILLUMINATIONTYPE;
            } 
            // fall through
          case 198: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
