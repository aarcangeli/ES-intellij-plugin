/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.aarcangeli.esj.lexer;

/*
 * This file is compiled with JFlex into gen/com/github/aarcangeli/esj/lexer/CLexer.java
 * If you are using Intellij You can install Grammar-Kit plugin and click ctrl+shift+G
 *
 * This file is based on Scanner.l from Serious Engine
 */

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ESLexer.flex</tt>
 */
class CLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int CPPBLOCK = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\16\2\0\1\14\22\0\1\1\1\104\1\15\2\0\1\20\1\106\1\17\1\77\1\100"+
    "\1\13\1\10\1\113\1\11\1\5\1\12\1\23\2\2\1\72\6\2\1\112\1\76\1\102\1\101\1"+
    "\103\1\114\1\0\1\3\1\60\1\52\1\57\1\6\1\26\1\66\1\4\1\64\2\4\1\62\1\71\1\56"+
    "\1\61\1\70\1\4\1\63\1\54\1\53\1\74\2\4\1\65\1\75\1\4\1\110\1\0\1\111\1\107"+
    "\1\4\1\0\1\36\1\41\1\35\1\37\1\7\1\25\1\55\1\30\1\31\1\51\1\43\1\32\1\46\1"+
    "\45\1\44\1\50\1\73\1\42\1\33\1\34\1\40\1\47\1\27\1\24\1\67\1\4\1\21\1\105"+
    "\1\22\1\115\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\4\1\5\1\4\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\3\26\4\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\3\37\1\3\1\0\5\4\2\40\1\12"+
    "\1\13\1\41\1\42\1\0\7\4\1\43\13\4\1\44"+
    "\4\4\1\45\22\4\1\46\2\3\1\0\6\4\1\0"+
    "\1\3\3\4\1\47\54\4\1\50\1\51\1\4\1\40"+
    "\5\4\1\52\3\4\1\53\4\4\1\54\1\55\4\4"+
    "\1\56\4\4\1\57\2\4\1\60\1\61\2\4\1\62"+
    "\10\4\1\63\4\4\1\64\1\4\1\65\1\4\1\66"+
    "\1\4\1\67\1\70\4\4\1\71\2\4\1\72\1\73"+
    "\4\4\1\74\3\4\1\75\10\4\1\76\2\4\1\77"+
    "\1\100\3\4\1\101\10\4\1\102\1\103\1\104\6\4"+
    "\1\105\1\106\15\4\1\107\5\4\1\110\2\4\1\111"+
    "\4\4\1\112\1\4\1\113\14\4\1\114\10\4\1\115"+
    "\1\116\6\4\1\117\5\4\1\120\1\121\4\4\1\122"+
    "\1\123\1\4\1\124\17\4\1\125\1\126\1\127\2\4"+
    "\1\130\11\4\1\131\1\132\12\4\1\133\3\4\1\134"+
    "\1\135\1\136\2\4\1\137\1\140\2\4\1\141\2\4"+
    "\1\142\1\4\1\143\1\4\1\144\1\4\1\145";

  private static int [] zzUnpackAction() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\352\0\u0270\0\352\0\352\0\u02be\0\352\0\u030c\0\u035a"+
    "\0\u03a8\0\352\0\352\0\u03f6\0\u0444\0\u0492\0\u04e0\0\u052e"+
    "\0\u057c\0\u05ca\0\u0618\0\u0666\0\u06b4\0\u0702\0\u0750\0\u079e"+
    "\0\u07ec\0\u083a\0\u0888\0\u08d6\0\u0924\0\u0972\0\u09c0\0\u0a0e"+
    "\0\u0a5c\0\u0aaa\0\352\0\352\0\352\0\352\0\352\0\352"+
    "\0\352\0\352\0\352\0\352\0\352\0\352\0\352\0\352"+
    "\0\352\0\352\0\352\0\u0af8\0\u0b46\0\u0b94\0\u0be2\0\u0c30"+
    "\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68\0\u0db6\0\u0e04\0\352\0\352"+
    "\0\352\0\352\0\u0e52\0\u0ea0\0\u0eee\0\u0f3c\0\u0f8a\0\u0fd8"+
    "\0\u1026\0\u1074\0\u0222\0\u10c2\0\u1110\0\u115e\0\u11ac\0\u11fa"+
    "\0\u1248\0\u1296\0\u12e4\0\u1332\0\u1380\0\u13ce\0\u0222\0\u141c"+
    "\0\u146a\0\u14b8\0\u1506\0\u0222\0\u1554\0\u15a2\0\u15f0\0\u163e"+
    "\0\u168c\0\u16da\0\u1728\0\u1776\0\u17c4\0\u1812\0\u1860\0\u18ae"+
    "\0\u18fc\0\u194a\0\u1998\0\u19e6\0\u1a34\0\u1a82\0\352\0\352"+
    "\0\u1ad0\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08\0\u1c56\0\u1ca4\0\u1cf2"+
    "\0\u1d40\0\u0e52\0\u1d8e\0\u1ddc\0\u1e2a\0\u0222\0\u1e78\0\u1ec6"+
    "\0\u1f14\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136"+
    "\0\u2184\0\u21d2\0\u2220\0\u226e\0\u22bc\0\u230a\0\u2358\0\u23a6"+
    "\0\u23f4\0\u2442\0\u2490\0\u24de\0\u252c\0\u257a\0\u25c8\0\u2616"+
    "\0\u2664\0\u26b2\0\u2700\0\u274e\0\u279c\0\u27ea\0\u2838\0\u2886"+
    "\0\u28d4\0\u2922\0\u2970\0\u29be\0\u2a0c\0\u2a5a\0\u2aa8\0\u2af6"+
    "\0\u2b44\0\u2b92\0\u0222\0\u0222\0\u2be0\0\352\0\u2c2e\0\u2c7c"+
    "\0\u2cca\0\u2d18\0\u2d66\0\u2db4\0\u2e02\0\u2e50\0\u2e9e\0\u0222"+
    "\0\u2eec\0\u2f3a\0\u2f88\0\u2fd6\0\u0222\0\u0222\0\u3024\0\u3072"+
    "\0\u30c0\0\u310e\0\u0222\0\u315c\0\u31aa\0\u31f8\0\u3246\0\u0222"+
    "\0\u3294\0\u32e2\0\u0222\0\u0222\0\u3330\0\u337e\0\u0222\0\u33cc"+
    "\0\u341a\0\u3468\0\u34b6\0\u3504\0\u3552\0\u35a0\0\u35ee\0\u0222"+
    "\0\u363c\0\u368a\0\u36d8\0\u3726\0\u3774\0\u37c2\0\u0222\0\u3810"+
    "\0\u0222\0\u385e\0\u38ac\0\u0222\0\u38fa\0\u3948\0\u3996\0\u39e4"+
    "\0\u0222\0\u3a32\0\u3a80\0\u0222\0\u0222\0\u3ace\0\u3b1c\0\u3b6a"+
    "\0\u3bb8\0\u0222\0\u3c06\0\u3c54\0\u3ca2\0\u0222\0\u3cf0\0\u3d3e"+
    "\0\u3d8c\0\u3dda\0\u3e28\0\u3e76\0\u3ec4\0\u3f12\0\u0222\0\u3f60"+
    "\0\u3fae\0\u0222\0\u0222\0\u3ffc\0\u404a\0\u4098\0\u0222\0\u40e6"+
    "\0\u4134\0\u4182\0\u41d0\0\u421e\0\u426c\0\u42ba\0\u4308\0\u0222"+
    "\0\u0222\0\u0222\0\u4356\0\u43a4\0\u43f2\0\u4440\0\u448e\0\u44dc"+
    "\0\u0222\0\u0222\0\u452a\0\u4578\0\u45c6\0\u4614\0\u4662\0\u46b0"+
    "\0\u46fe\0\u474c\0\u479a\0\u47e8\0\u4836\0\u4884\0\u48d2\0\u0222"+
    "\0\u4920\0\u496e\0\u49bc\0\u4a0a\0\u4a58\0\u0222\0\u4aa6\0\u4af4"+
    "\0\u0222\0\u4b42\0\u4b90\0\u4bde\0\u4c2c\0\u0222\0\u4c7a\0\u0222"+
    "\0\u4cc8\0\u4d16\0\u4d64\0\u4db2\0\u4e00\0\u4e4e\0\u4e9c\0\u4eea"+
    "\0\u4f38\0\u4f86\0\u4fd4\0\u5022\0\u0222\0\u5070\0\u50be\0\u510c"+
    "\0\u515a\0\u51a8\0\u51f6\0\u5244\0\u5292\0\u0222\0\u0222\0\u52e0"+
    "\0\u532e\0\u537c\0\u53ca\0\u5418\0\u5466\0\u54b4\0\u5502\0\u5550"+
    "\0\u559e\0\u55ec\0\u563a\0\u0222\0\u0222\0\u5688\0\u56d6\0\u5724"+
    "\0\u5772\0\u0222\0\u0222\0\u57c0\0\u0222\0\u580e\0\u585c\0\u58aa"+
    "\0\u58f8\0\u5946\0\u5994\0\u59e2\0\u5a30\0\u5a7e\0\u5acc\0\u5b1a"+
    "\0\u5b68\0\u5bb6\0\u5c04\0\u5c52\0\u0222\0\u0222\0\u0222\0\u5ca0"+
    "\0\u5cee\0\u5d3c\0\u5d8a\0\u5dd8\0\u5e26\0\u5e74\0\u5ec2\0\u5f10"+
    "\0\u5f5e\0\u5fac\0\u5ffa\0\u0222\0\u0222\0\u6048\0\u6096\0\u60e4"+
    "\0\u6132\0\u6180\0\u61ce\0\u621c\0\u626a\0\u62b8\0\u6306\0\u0222"+
    "\0\u6354\0\u63a2\0\u63f0\0\u0222\0\u0222\0\u0222\0\u643e\0\u648c"+
    "\0\u0222\0\u0222\0\u64da\0\u6528\0\u0222\0\u6576\0\u65c4\0\u0222"+
    "\0\u6612\0\u0222\0\u6660\0\u0222\0\u66ae\0\u0222";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\10\1\12"+
    "\1\13\1\14\1\15\1\16\1\5\1\17\1\5\1\20"+
    "\1\21\1\22\1\23\1\24\1\10\1\25\1\26\1\27"+
    "\1\10\1\30\1\10\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\10\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\5\10\1\50\2\10\1\51\1\52"+
    "\5\10\1\6\3\10\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\116\4\3\73\2\74\1\73\2\74"+
    "\10\73\1\75\3\73\46\74\1\73\3\74\20\73\117\0"+
    "\1\5\12\0\1\5\1\0\1\5\101\0\1\6\2\0"+
    "\1\76\2\77\13\0\1\6\46\0\1\6\25\0\3\10"+
    "\1\0\2\10\13\0\33\10\1\100\17\10\22\0\3\10"+
    "\1\0\2\10\13\0\53\10\22\0\3\10\1\0\2\10"+
    "\13\0\1\10\1\101\5\10\1\102\12\10\1\103\1\10"+
    "\1\104\26\10\32\0\1\105\1\106\102\0\15\17\1\107"+
    "\1\0\77\17\16\20\1\0\1\110\76\20\21\0\1\111"+
    "\1\112\75\0\1\6\2\0\1\76\2\77\13\0\1\6"+
    "\1\113\45\0\1\6\25\0\3\10\1\0\1\10\1\114"+
    "\13\0\7\10\1\115\5\10\1\116\3\10\1\117\31\10"+
    "\22\0\3\10\1\0\2\10\13\0\37\10\1\120\13\10"+
    "\22\0\3\10\1\0\2\10\13\0\5\10\1\121\5\10"+
    "\1\122\37\10\22\0\3\10\1\0\2\10\13\0\2\10"+
    "\1\123\17\10\1\124\30\10\22\0\3\10\1\0\2\10"+
    "\13\0\4\10\1\125\4\10\1\126\7\10\1\127\31\10"+
    "\22\0\3\10\1\0\1\10\1\130\13\0\5\10\1\131"+
    "\45\10\22\0\3\10\1\0\2\10\13\0\7\10\1\132"+
    "\3\10\1\133\5\10\1\134\31\10\22\0\3\10\1\0"+
    "\2\10\13\0\15\10\1\135\35\10\22\0\3\10\1\0"+
    "\1\10\1\136\13\0\21\10\1\137\31\10\22\0\3\10"+
    "\1\0\2\10\13\0\10\10\1\140\42\10\22\0\3\10"+
    "\1\0\2\10\13\0\17\10\1\141\33\10\22\0\3\10"+
    "\1\0\1\10\1\142\13\0\53\10\22\0\3\10\1\0"+
    "\2\10\13\0\11\10\1\143\10\10\1\144\30\10\22\0"+
    "\3\10\1\0\2\10\13\0\13\10\1\145\37\10\22\0"+
    "\3\10\1\0\2\10\13\0\21\10\1\146\31\10\22\0"+
    "\3\10\1\0\2\10\13\0\6\10\1\147\12\10\1\150"+
    "\31\10\22\0\3\10\1\0\2\10\13\0\13\10\1\151"+
    "\3\10\1\152\33\10\22\0\3\10\1\0\2\10\13\0"+
    "\15\10\1\153\35\10\22\0\1\10\1\154\1\10\1\0"+
    "\1\155\1\10\13\0\30\10\1\156\1\157\4\10\1\160"+
    "\6\10\1\161\1\162\4\10\22\0\3\10\1\0\2\10"+
    "\13\0\36\10\1\163\14\10\22\0\1\10\1\164\1\10"+
    "\1\0\2\10\13\0\53\10\22\0\3\10\1\0\2\10"+
    "\13\0\33\10\1\165\3\10\1\166\13\10\22\0\3\74"+
    "\1\0\2\74\13\0\53\74\42\0\1\167\75\0\1\76"+
    "\3\0\2\77\13\0\1\76\1\0\2\170\43\0\1\76"+
    "\25\0\1\171\5\0\2\172\11\0\1\171\46\0\1\171"+
    "\25\0\3\10\1\0\2\10\13\0\41\10\1\173\1\10"+
    "\1\174\7\10\22\0\3\10\1\0\2\10\13\0\25\10"+
    "\1\175\25\10\22\0\3\10\1\0\2\10\13\0\10\10"+
    "\1\176\42\10\22\0\3\10\1\0\2\10\13\0\15\10"+
    "\1\177\35\10\22\0\3\10\1\0\1\10\1\200\13\0"+
    "\53\10\20\0\14\105\1\0\1\105\1\0\77\105\13\106"+
    "\1\201\102\106\2\0\2\202\2\0\2\202\13\0\1\202"+
    "\1\0\2\202\6\0\3\202\1\0\1\202\10\0\1\202"+
    "\4\0\2\202\11\0\1\202\25\0\3\10\1\0\2\10"+
    "\13\0\13\10\1\203\37\10\22\0\3\10\1\0\2\10"+
    "\13\0\13\10\1\204\37\10\22\0\3\10\1\0\2\10"+
    "\13\0\22\10\1\205\30\10\22\0\3\10\1\0\2\10"+
    "\13\0\17\10\1\206\33\10\22\0\3\10\1\0\2\10"+
    "\13\0\36\10\1\207\14\10\22\0\3\10\1\0\2\10"+
    "\13\0\6\10\1\210\44\10\22\0\3\10\1\0\2\10"+
    "\13\0\6\10\1\211\44\10\22\0\3\10\1\0\2\10"+
    "\13\0\7\10\1\212\43\10\22\0\3\10\1\0\2\10"+
    "\13\0\6\10\1\213\44\10\22\0\3\10\1\0\2\10"+
    "\13\0\13\10\1\214\5\10\1\215\31\10\22\0\3\10"+
    "\1\0\2\10\13\0\15\10\1\216\35\10\22\0\3\10"+
    "\1\0\2\10\13\0\1\10\1\217\51\10\22\0\3\10"+
    "\1\0\2\10\13\0\15\10\1\220\35\10\22\0\3\10"+
    "\1\0\2\10\13\0\13\10\1\221\37\10\22\0\3\10"+
    "\1\0\2\10\13\0\7\10\1\222\1\223\42\10\22\0"+
    "\3\10\1\0\2\10\13\0\22\10\1\224\1\225\27\10"+
    "\22\0\3\10\1\0\2\10\13\0\11\10\1\226\41\10"+
    "\22\0\3\10\1\0\2\10\13\0\2\10\1\227\50\10"+
    "\22\0\3\10\1\0\1\10\1\230\13\0\53\10\22\0"+
    "\3\10\1\0\1\10\1\231\13\0\53\10\22\0\3\10"+
    "\1\0\2\10\13\0\10\10\1\232\1\233\41\10\22\0"+
    "\3\10\1\0\2\10\13\0\5\10\1\234\45\10\22\0"+
    "\3\10\1\0\2\10\13\0\23\10\1\235\27\10\22\0"+
    "\3\10\1\0\2\10\13\0\14\10\1\236\36\10\22\0"+
    "\3\10\1\0\2\10\13\0\17\10\1\237\33\10\22\0"+
    "\3\10\1\0\2\10\13\0\6\10\1\240\44\10\22\0"+
    "\3\10\1\0\2\10\13\0\10\10\1\241\42\10\22\0"+
    "\3\10\1\0\2\10\13\0\21\10\1\242\31\10\22\0"+
    "\3\10\1\0\2\10\13\0\23\10\1\243\27\10\22\0"+
    "\3\10\1\0\2\10\13\0\22\10\1\244\30\10\22\0"+
    "\3\10\1\0\2\10\13\0\22\10\1\245\30\10\22\0"+
    "\3\10\1\0\2\10\13\0\3\10\1\246\25\10\1\247"+
    "\21\10\22\0\3\10\1\0\2\10\13\0\21\10\1\250"+
    "\31\10\22\0\3\10\1\0\2\10\13\0\37\10\1\251"+
    "\13\10\22\0\3\10\1\0\2\10\13\0\7\10\1\252"+
    "\43\10\22\0\3\10\1\0\2\10\13\0\21\10\1\253"+
    "\31\10\22\0\3\10\1\0\2\10\13\0\36\10\1\254"+
    "\14\10\22\0\3\10\1\0\2\10\13\0\33\10\1\255"+
    "\17\10\22\0\3\10\1\0\2\10\13\0\34\10\1\256"+
    "\16\10\22\0\3\10\1\0\2\10\13\0\37\10\1\257"+
    "\13\10\22\0\1\171\20\0\1\171\1\0\2\170\43\0"+
    "\1\171\25\0\1\171\20\0\1\171\46\0\1\171\25\0"+
    "\3\10\1\0\2\10\13\0\46\10\1\260\4\10\22\0"+
    "\3\10\1\0\2\10\13\0\37\10\1\261\13\10\22\0"+
    "\3\10\1\0\2\10\13\0\21\10\1\262\31\10\22\0"+
    "\3\10\1\0\1\10\1\263\13\0\53\10\22\0\3\10"+
    "\1\0\2\10\13\0\23\10\1\264\27\10\22\0\3\10"+
    "\1\0\2\10\13\0\22\10\1\265\30\10\20\0\12\106"+
    "\1\266\1\201\102\106\2\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\267\41\10\22\0\3\10\1\0\2\10\13\0"+
    "\32\10\1\270\20\10\22\0\3\10\1\0\2\10\13\0"+
    "\12\10\1\271\40\10\22\0\1\10\1\272\1\10\1\0"+
    "\2\10\13\0\53\10\22\0\3\10\1\0\2\10\13\0"+
    "\7\10\1\273\43\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\274\41\10\22\0\3\10\1\0\2\10\13\0"+
    "\6\10\1\275\44\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\276\41\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\277\41\10\22\0\3\10\1\0\2\10\13\0"+
    "\25\10\1\300\25\10\22\0\3\10\1\0\2\10\13\0"+
    "\22\10\1\301\30\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\302\41\10\22\0\3\10\1\0\2\10\13\0"+
    "\23\10\1\303\27\10\22\0\3\10\1\0\2\10\13\0"+
    "\10\10\1\304\42\10\22\0\3\10\1\0\2\10\13\0"+
    "\7\10\1\305\43\10\22\0\3\10\1\0\1\10\1\306"+
    "\13\0\53\10\22\0\3\10\1\0\2\10\13\0\10\10"+
    "\1\307\42\10\22\0\3\10\1\0\2\10\13\0\25\10"+
    "\1\310\25\10\22\0\3\10\1\0\2\10\13\0\21\10"+
    "\1\311\31\10\22\0\3\10\1\0\2\10\13\0\13\10"+
    "\1\312\37\10\22\0\3\10\1\0\2\10\13\0\10\10"+
    "\1\313\42\10\22\0\3\10\1\0\2\10\13\0\13\10"+
    "\1\314\37\10\22\0\3\10\1\0\2\10\13\0\15\10"+
    "\1\315\35\10\22\0\3\10\1\0\2\10\13\0\15\10"+
    "\1\316\35\10\22\0\3\10\1\0\1\10\1\317\13\0"+
    "\53\10\22\0\3\10\1\0\1\10\1\320\13\0\53\10"+
    "\22\0\3\10\1\0\1\10\1\321\13\0\53\10\22\0"+
    "\3\10\1\0\2\10\13\0\11\10\1\322\41\10\22\0"+
    "\3\10\1\0\2\10\13\0\14\10\1\323\36\10\22\0"+
    "\3\10\1\0\2\10\13\0\10\10\1\324\42\10\22\0"+
    "\3\10\1\0\2\10\13\0\12\10\1\325\12\10\1\326"+
    "\25\10\22\0\3\10\1\0\2\10\13\0\25\10\1\327"+
    "\25\10\22\0\3\10\1\0\2\10\13\0\6\10\1\330"+
    "\44\10\22\0\3\10\1\0\2\10\13\0\11\10\1\331"+
    "\41\10\22\0\3\10\1\0\2\10\13\0\6\10\1\332"+
    "\44\10\22\0\3\10\1\0\2\10\13\0\11\10\1\333"+
    "\41\10\22\0\3\10\1\0\2\10\13\0\15\10\1\334"+
    "\35\10\22\0\3\10\1\0\2\10\13\0\36\10\1\335"+
    "\14\10\22\0\3\10\1\0\2\10\13\0\13\10\1\336"+
    "\37\10\22\0\3\10\1\0\2\10\13\0\14\10\1\337"+
    "\36\10\22\0\3\10\1\0\2\10\13\0\37\10\1\340"+
    "\13\10\22\0\3\10\1\0\2\10\13\0\43\10\1\341"+
    "\7\10\22\0\3\10\1\0\1\342\1\10\13\0\53\10"+
    "\22\0\3\10\1\0\2\10\13\0\51\10\1\343\1\10"+
    "\22\0\1\10\1\344\1\10\1\0\2\10\13\0\53\10"+
    "\22\0\3\10\1\0\1\345\1\10\13\0\53\10\22\0"+
    "\3\10\1\0\2\10\13\0\17\10\1\346\33\10\22\0"+
    "\3\10\1\0\2\10\13\0\11\10\1\347\41\10\22\0"+
    "\3\10\1\0\2\10\13\0\15\10\1\350\35\10\22\0"+
    "\3\10\1\0\2\10\13\0\10\10\1\351\42\10\22\0"+
    "\3\10\1\0\2\10\13\0\11\10\1\352\41\10\22\0"+
    "\3\10\1\0\2\10\13\0\30\10\1\353\22\10\22\0"+
    "\3\10\1\0\1\10\1\354\13\0\53\10\22\0\3\10"+
    "\1\0\1\10\1\355\13\0\53\10\22\0\3\10\1\0"+
    "\2\10\13\0\22\10\1\356\30\10\22\0\3\10\1\0"+
    "\2\10\13\0\12\10\1\357\40\10\22\0\3\10\1\0"+
    "\2\10\13\0\6\10\1\360\44\10\22\0\3\10\1\0"+
    "\2\10\13\0\14\10\1\361\36\10\22\0\3\10\1\0"+
    "\2\10\13\0\15\10\1\362\35\10\22\0\3\10\1\0"+
    "\2\10\13\0\16\10\1\363\34\10\22\0\3\10\1\0"+
    "\2\10\13\0\10\10\1\364\42\10\22\0\3\10\1\0"+
    "\2\10\13\0\11\10\1\365\41\10\22\0\3\10\1\0"+
    "\2\10\13\0\21\10\1\366\31\10\22\0\3\10\1\0"+
    "\2\10\13\0\4\10\1\367\5\10\1\370\40\10\22\0"+
    "\3\10\1\0\2\10\13\0\15\10\1\371\35\10\22\0"+
    "\3\10\1\0\2\10\13\0\20\10\1\372\32\10\22\0"+
    "\3\10\1\0\2\10\13\0\23\10\1\373\27\10\22\0"+
    "\3\10\1\0\2\10\13\0\17\10\1\374\33\10\22\0"+
    "\3\10\1\0\2\10\13\0\17\10\1\375\33\10\22\0"+
    "\3\10\1\0\2\10\13\0\7\10\1\376\43\10\22\0"+
    "\3\10\1\0\2\10\13\0\15\10\1\377\35\10\22\0"+
    "\3\10\1\0\1\10\1\u0100\13\0\53\10\22\0\3\10"+
    "\1\0\1\10\1\u0101\13\0\53\10\22\0\3\10\1\0"+
    "\2\10\13\0\23\10\1\u0102\27\10\22\0\3\10\1\0"+
    "\2\10\13\0\6\10\1\u0103\44\10\22\0\3\10\1\0"+
    "\2\10\13\0\7\10\1\u0104\43\10\22\0\3\10\1\0"+
    "\2\10\13\0\17\10\1\u0105\33\10\22\0\3\10\1\0"+
    "\2\10\13\0\22\10\1\u0106\30\10\22\0\3\10\1\0"+
    "\2\10\13\0\40\10\1\u0107\12\10\22\0\3\10\1\0"+
    "\2\10\13\0\12\10\1\u0108\40\10\22\0\3\10\1\0"+
    "\1\10\1\u0109\13\0\53\10\22\0\3\10\1\0\1\u010a"+
    "\1\10\13\0\53\10\22\0\3\10\1\0\2\10\13\0"+
    "\42\10\1\u010b\10\10\22\0\3\10\1\0\2\10\13\0"+
    "\46\10\1\u010c\4\10\22\0\3\10\1\0\2\10\13\0"+
    "\30\10\1\u010d\22\10\22\0\3\10\1\0\2\10\13\0"+
    "\47\10\1\u010e\3\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u010f\41\10\22\0\3\10\1\0\2\10\13\0"+
    "\17\10\1\u0110\33\10\22\0\3\10\1\0\2\10\13\0"+
    "\6\10\1\u0111\44\10\22\0\3\10\1\0\2\10\13\0"+
    "\13\10\1\u0112\7\10\1\u0113\1\10\1\u0114\21\10\1\u0115"+
    "\1\u0116\2\10\22\0\3\10\1\0\2\10\13\0\24\10"+
    "\1\u0117\26\10\22\0\3\10\1\0\1\10\1\u0118\13\0"+
    "\53\10\22\0\3\10\1\0\2\10\13\0\5\10\1\u0119"+
    "\45\10\22\0\3\10\1\0\2\10\13\0\12\10\1\u011a"+
    "\40\10\22\0\3\10\1\0\2\10\13\0\17\10\1\u011b"+
    "\33\10\22\0\3\10\1\0\2\10\13\0\22\10\1\u011c"+
    "\30\10\22\0\3\10\1\0\2\10\13\0\22\10\1\u011d"+
    "\30\10\22\0\3\10\1\0\2\10\13\0\13\10\1\u011e"+
    "\37\10\22\0\3\10\1\0\2\10\13\0\13\10\1\u011f"+
    "\37\10\22\0\3\10\1\0\2\10\13\0\7\10\1\u0120"+
    "\43\10\22\0\3\10\1\0\1\10\1\u0121\13\0\53\10"+
    "\22\0\3\10\1\0\2\10\13\0\22\10\1\u0122\30\10"+
    "\22\0\3\10\1\0\2\10\13\0\4\10\1\u0123\46\10"+
    "\22\0\3\10\1\0\2\10\13\0\13\10\1\u0124\37\10"+
    "\22\0\3\10\1\0\2\10\13\0\14\10\1\u0125\36\10"+
    "\22\0\3\10\1\0\2\10\13\0\17\10\1\u0126\33\10"+
    "\22\0\3\10\1\0\2\10\13\0\36\10\1\u0127\14\10"+
    "\22\0\3\10\1\0\2\10\13\0\11\10\1\u0128\41\10"+
    "\22\0\3\10\1\0\1\10\1\u0129\13\0\53\10\22\0"+
    "\3\10\1\0\2\10\13\0\6\10\1\u012a\44\10\22\0"+
    "\3\10\1\0\2\10\13\0\14\10\1\u012b\36\10\22\0"+
    "\3\10\1\0\1\10\1\u012c\13\0\53\10\22\0\3\10"+
    "\1\0\2\10\13\0\7\10\1\u012d\43\10\22\0\3\10"+
    "\1\0\2\10\13\0\41\10\1\u012e\11\10\22\0\3\10"+
    "\1\0\2\10\13\0\41\10\1\u012f\11\10\22\0\3\10"+
    "\1\0\2\10\13\0\34\10\1\u0130\16\10\22\0\3\10"+
    "\1\0\1\10\1\u0131\13\0\53\10\22\0\3\10\1\0"+
    "\2\10\13\0\21\10\1\u0132\31\10\22\0\3\10\1\0"+
    "\2\10\13\0\13\10\1\u0133\37\10\22\0\3\10\1\0"+
    "\2\10\13\0\13\10\1\u0134\37\10\22\0\3\10\1\0"+
    "\2\10\13\0\7\10\1\u0135\43\10\22\0\3\10\1\0"+
    "\2\10\13\0\34\10\1\u0136\16\10\22\0\3\10\1\0"+
    "\2\10\13\0\15\10\1\u0137\35\10\22\0\3\10\1\0"+
    "\1\10\1\u0138\13\0\53\10\22\0\3\10\1\0\1\10"+
    "\1\u0139\13\0\53\10\22\0\3\10\1\0\2\10\13\0"+
    "\13\10\1\u013a\37\10\22\0\3\10\1\0\1\10\1\u013b"+
    "\13\0\53\10\22\0\3\10\1\0\2\10\13\0\6\10"+
    "\1\u013c\44\10\22\0\3\10\1\0\2\10\13\0\7\10"+
    "\1\u013d\43\10\22\0\3\10\1\0\2\10\13\0\11\10"+
    "\1\u013e\41\10\22\0\3\10\1\0\2\10\13\0\6\10"+
    "\1\u013f\44\10\22\0\3\10\1\0\2\10\13\0\7\10"+
    "\1\u0140\43\10\22\0\3\10\1\0\2\10\13\0\15\10"+
    "\1\u0141\35\10\22\0\3\10\1\0\2\10\13\0\11\10"+
    "\1\u0142\41\10\22\0\3\10\1\0\2\10\13\0\16\10"+
    "\1\u0143\34\10\22\0\3\10\1\0\2\10\13\0\44\10"+
    "\1\u0144\6\10\22\0\3\10\1\0\2\10\13\0\33\10"+
    "\1\u0145\17\10\22\0\3\10\1\0\2\10\13\0\22\10"+
    "\1\u0146\30\10\22\0\3\10\1\0\2\10\13\0\36\10"+
    "\1\u0147\14\10\22\0\3\10\1\0\2\10\13\0\23\10"+
    "\1\u0148\27\10\22\0\3\10\1\0\2\10\13\0\36\10"+
    "\1\u0149\2\10\1\u014a\11\10\22\0\3\10\1\0\2\10"+
    "\13\0\33\10\1\u014b\17\10\22\0\3\10\1\0\2\10"+
    "\13\0\36\10\1\u014c\14\10\22\0\3\10\1\0\2\10"+
    "\13\0\10\10\1\u014d\42\10\22\0\3\10\1\0\2\10"+
    "\13\0\22\10\1\u014e\30\10\22\0\3\10\1\0\2\10"+
    "\13\0\16\10\1\u014f\34\10\22\0\3\10\1\0\2\10"+
    "\13\0\11\10\1\u0150\41\10\22\0\3\10\1\0\2\10"+
    "\13\0\13\10\1\u0151\37\10\22\0\3\10\1\0\2\10"+
    "\13\0\13\10\1\u0152\37\10\22\0\3\10\1\0\2\10"+
    "\13\0\22\10\1\u0153\30\10\22\0\3\10\1\0\2\10"+
    "\13\0\6\10\1\u0154\44\10\22\0\3\10\1\0\2\10"+
    "\13\0\22\10\1\u0155\30\10\22\0\3\10\1\0\2\10"+
    "\13\0\11\10\1\u0156\41\10\22\0\3\10\1\0\2\10"+
    "\13\0\7\10\1\u0157\43\10\22\0\3\10\1\0\2\10"+
    "\13\0\10\10\1\u0158\42\10\22\0\3\10\1\0\2\10"+
    "\13\0\17\10\1\u0159\33\10\22\0\3\10\1\0\2\10"+
    "\13\0\6\10\1\u015a\44\10\22\0\3\10\1\0\2\10"+
    "\13\0\26\10\1\u015b\24\10\22\0\3\10\1\0\2\10"+
    "\13\0\45\10\1\u015c\5\10\22\0\3\10\1\0\2\10"+
    "\13\0\13\10\1\u015d\37\10\22\0\3\10\1\0\2\10"+
    "\13\0\32\10\1\u015e\20\10\22\0\3\10\1\0\2\10"+
    "\13\0\16\10\1\u015f\34\10\22\0\3\10\1\0\1\10"+
    "\1\u0160\13\0\53\10\22\0\3\10\1\0\2\10\13\0"+
    "\16\10\1\u0161\34\10\22\0\3\10\1\0\2\10\13\0"+
    "\22\10\1\u0162\30\10\22\0\1\10\1\u0163\1\10\1\0"+
    "\2\10\13\0\53\10\22\0\3\10\1\0\2\10\13\0"+
    "\33\10\1\u0164\17\10\22\0\3\10\1\0\2\10\13\0"+
    "\10\10\1\u0165\42\10\22\0\3\10\1\0\2\10\13\0"+
    "\16\10\1\u0166\34\10\22\0\3\10\1\0\2\10\13\0"+
    "\17\10\1\u0167\33\10\22\0\3\10\1\0\2\10\13\0"+
    "\22\10\1\u0168\30\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u0169\41\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u016a\41\10\22\0\3\10\1\0\2\10\13\0"+
    "\7\10\1\u016b\43\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u016c\41\10\22\0\3\10\1\0\1\10\1\u016d"+
    "\13\0\53\10\22\0\3\10\1\0\1\10\1\u016e\13\0"+
    "\53\10\22\0\3\10\1\0\1\10\1\u016f\13\0\53\10"+
    "\22\0\3\10\1\0\1\10\1\u0170\13\0\53\10\22\0"+
    "\3\10\1\0\2\10\13\0\21\10\1\u0171\31\10\22\0"+
    "\3\10\1\0\2\10\13\0\23\10\1\u0172\27\10\22\0"+
    "\3\10\1\0\2\10\13\0\30\10\1\u0173\22\10\22\0"+
    "\3\10\1\0\2\10\13\0\26\10\1\u0174\24\10\22\0"+
    "\3\10\1\0\2\10\13\0\22\10\1\u0175\30\10\22\0"+
    "\3\10\1\0\2\10\13\0\26\10\1\u0176\24\10\22\0"+
    "\3\10\1\0\2\10\13\0\10\10\1\u0177\42\10\22\0"+
    "\3\10\1\0\2\10\13\0\30\10\1\u0178\22\10\22\0"+
    "\3\10\1\0\2\10\13\0\21\10\1\u0179\31\10\22\0"+
    "\3\10\1\0\2\10\13\0\6\10\1\u017a\44\10\22\0"+
    "\3\10\1\0\1\10\1\u017b\13\0\53\10\22\0\3\10"+
    "\1\0\2\10\13\0\47\10\1\u017c\3\10\22\0\3\10"+
    "\1\0\2\10\13\0\10\10\1\u017d\42\10\22\0\3\10"+
    "\1\0\2\10\13\0\10\10\1\u017e\42\10\22\0\3\10"+
    "\1\0\2\10\13\0\10\10\1\u017f\42\10\22\0\3\10"+
    "\1\0\2\10\13\0\12\10\1\u0180\40\10\22\0\3\10"+
    "\1\0\2\10\13\0\6\10\1\u0181\44\10\22\0\3\10"+
    "\1\0\1\10\1\u0182\13\0\53\10\22\0\3\10\1\0"+
    "\2\10\13\0\17\10\1\u0183\33\10\22\0\3\10\1\0"+
    "\1\10\1\u0184\13\0\53\10\22\0\3\10\1\0\2\10"+
    "\13\0\11\10\1\u0185\41\10\22\0\3\10\1\0\1\10"+
    "\1\u0186\13\0\53\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u0187\41\10\22\0\3\10\1\0\2\10\13\0"+
    "\41\10\1\u0188\11\10\22\0\3\10\1\0\2\10\13\0"+
    "\1\10\1\u0189\51\10\22\0\3\10\1\0\2\10\13\0"+
    "\1\10\1\u018a\51\10\22\0\3\10\1\0\2\10\13\0"+
    "\47\10\1\u018b\3\10\22\0\3\10\1\0\2\10\13\0"+
    "\34\10\1\u018c\16\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u018d\41\10\22\0\3\10\1\0\2\10\13\0"+
    "\22\10\1\u018e\30\10\22\0\3\10\1\0\2\10\13\0"+
    "\33\10\1\u018f\17\10\22\0\3\10\1\0\2\10\13\0"+
    "\13\10\1\u0190\37\10\22\0\3\10\1\0\2\10\13\0"+
    "\12\10\1\u0191\40\10\22\0\3\10\1\0\2\10\13\0"+
    "\47\10\1\u0192\3\10\22\0\3\10\1\0\2\10\13\0"+
    "\12\10\1\u0193\40\10\22\0\3\10\1\0\2\10\13\0"+
    "\13\10\1\u0194\37\10\22\0\3\10\1\0\2\10\13\0"+
    "\36\10\1\u0195\14\10\22\0\3\10\1\0\2\10\13\0"+
    "\47\10\1\u0196\3\10\22\0\3\10\1\0\2\10\13\0"+
    "\47\10\1\u0197\3\10\22\0\3\10\1\0\2\10\13\0"+
    "\34\10\1\u0198\16\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u0199\41\10\22\0\3\10\1\0\2\10\13\0"+
    "\21\10\1\u019a\31\10\22\0\3\10\1\0\2\10\13\0"+
    "\22\10\1\u019b\30\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u019c\41\10\22\0\3\10\1\0\2\10\13\0"+
    "\34\10\1\u019d\16\10\22\0\3\10\1\0\2\10\13\0"+
    "\11\10\1\u019e\41\10\22\0\3\10\1\0\2\10\13\0"+
    "\22\10\1\u019f\30\10\22\0\3\10\1\0\2\10\13\0"+
    "\33\10\1\u01a0\17\10\22\0\3\10\1\0\2\10\13\0"+
    "\34\10\1\u01a1\16\10\22\0\3\10\1\0\2\10\13\0"+
    "\34\10\1\u01a2\16\10\22\0\3\10\1\0\1\10\1\u01a3"+
    "\13\0\53\10\22\0\3\10\1\0\2\10\13\0\34\10"+
    "\1\u01a4\16\10\22\0\3\10\1\0\2\10\13\0\10\10"+
    "\1\u01a5\42\10\22\0\3\10\1\0\2\10\13\0\12\10"+
    "\1\u01a6\40\10\22\0\3\10\1\0\2\10\13\0\30\10"+
    "\1\u01a7\22\10\22\0\3\10\1\0\2\10\13\0\17\10"+
    "\1\u01a8\33\10\22\0\3\10\1\0\1\10\1\u01a9\13\0"+
    "\53\10\22\0\3\10\1\0\1\10\1\u01aa\13\0\53\10"+
    "\22\0\3\10\1\0\2\10\13\0\52\10\1\u01ab\22\0"+
    "\3\10\1\0\2\10\13\0\25\10\1\u01ac\25\10\22\0"+
    "\3\10\1\0\2\10\13\0\45\10\1\u01ad\5\10\22\0"+
    "\3\10\1\0\1\u01ae\1\10\13\0\53\10\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26364];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\1\1\2\11\1\1\1\11"+
    "\3\1\2\11\27\1\21\11\3\1\1\0\7\1\4\11"+
    "\1\0\53\1\2\11\1\1\1\0\6\1\1\0\64\1"+
    "\1\11\370\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case CPPBLOCK: {
              yybegin(YYINITIAL); return CTokens.CPP_BLOCK;
            }  // fall though
            case 431: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 102: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 103: break;
          case 3: 
            { return CTokens.C_INT;
            } 
            // fall through
          case 104: break;
          case 4: 
            { return CTokens.IDENTIFIER;
            } 
            // fall through
          case 105: break;
          case 5: 
            { return CTokens.DOT;
            } 
            // fall through
          case 106: break;
          case 6: 
            { return CTokens.PLUS;
            } 
            // fall through
          case 107: break;
          case 7: 
            { return CTokens.MINUS;
            } 
            // fall through
          case 108: break;
          case 8: 
            { return CTokens.DIV;
            } 
            // fall through
          case 109: break;
          case 9: 
            { return CTokens.ASTERISK;
            } 
            // fall through
          case 110: break;
          case 10: 
            { return CTokens.C_STRING;
            } 
            // fall through
          case 111: break;
          case 11: 
            { return CTokens.C_CHAR;
            } 
            // fall through
          case 112: break;
          case 12: 
            { return CTokens.PERC;
            } 
            // fall through
          case 113: break;
          case 13: 
            { return CTokens.LBRACE;
            } 
            // fall through
          case 114: break;
          case 14: 
            { return CTokens.RBRACE;
            } 
            // fall through
          case 115: break;
          case 15: 
            { return CTokens.SEMICOLON;
            } 
            // fall through
          case 116: break;
          case 16: 
            { return CTokens.LPARENTH;
            } 
            // fall through
          case 117: break;
          case 17: 
            { return CTokens.RPARENTH;
            } 
            // fall through
          case 118: break;
          case 18: 
            { return CTokens.EQ;
            } 
            // fall through
          case 119: break;
          case 19: 
            { return CTokens.LT;
            } 
            // fall through
          case 120: break;
          case 20: 
            { return CTokens.GT;
            } 
            // fall through
          case 121: break;
          case 21: 
            { return CTokens.EXCL;
            } 
            // fall through
          case 122: break;
          case 22: 
            { return CTokens.OR;
            } 
            // fall through
          case 123: break;
          case 23: 
            { return CTokens.AND;
            } 
            // fall through
          case 124: break;
          case 24: 
            { return CTokens.XOR;
            } 
            // fall through
          case 125: break;
          case 25: 
            { return CTokens.LBRACKET;
            } 
            // fall through
          case 126: break;
          case 26: 
            { return CTokens.RBRACKET;
            } 
            // fall through
          case 127: break;
          case 27: 
            { return CTokens.COLON;
            } 
            // fall through
          case 128: break;
          case 28: 
            { return CTokens.COMMA;
            } 
            // fall through
          case 129: break;
          case 29: 
            { return CTokens.QUEST;
            } 
            // fall through
          case 130: break;
          case 30: 
            { return CTokens.TILDE;
            } 
            // fall through
          case 131: break;
          case 31: 
            { 
            } 
            // fall through
          case 132: break;
          case 32: 
            { return CTokens.COMMENT;
            } 
            // fall through
          case 133: break;
          case 33: 
            { yybegin(CPPBLOCK); return CTokens.CPP_BLOCK_BEGIN;
            } 
            // fall through
          case 134: break;
          case 34: 
            { return CTokens.CPP_BLOCK_END;
            } 
            // fall through
          case 135: break;
          case 35: 
            { return CTokens.K_IF;
            } 
            // fall through
          case 136: break;
          case 36: 
            { return CTokens.K_DO;
            } 
            // fall through
          case 137: break;
          case 37: 
            { return CTokens.K_ON;
            } 
            // fall through
          case 138: break;
          case 38: 
            { yybegin(YYINITIAL); yypushback(yylength()); return CTokens.CPP_BLOCK;
            } 
            // fall through
          case 139: break;
          case 39: 
            { return CTokens.K_FOR;
            } 
            // fall through
          case 140: break;
          case 40: 
            { return CTokens.K_ELSE;
            } 
            // fall through
          case 141: break;
          case 41: 
            { return CTokens.K_ENUM;
            } 
            // fall through
          case 142: break;
          case 42: 
            { return CTokens.K_WAIT;
            } 
            // fall through
          case 143: break;
          case 43: 
            { return CTokens.K_STOP;
            } 
            // fall through
          case 144: break;
          case 44: 
            { return CTokens.K_CALL;
            } 
            // fall through
          case 145: break;
          case 45: 
            { return CTokens.K_CASE;
            } 
            // fall through
          case 146: break;
          case 46: 
            { return CTokens.K_USES;
            } 
            // fall through
          case 147: break;
          case 47: 
            { return CTokens.K_NAME;
            } 
            // fall through
          case 148: break;
          case 48: 
            { return CTokens.K_VOID;
            } 
            // fall through
          case 149: break;
          case 49: 
            { return CTokens.K_PASS;
            } 
            // fall through
          case 150: break;
          case 50: 
            { return CTokens.K_JUMP;
            } 
            // fall through
          case 151: break;
          case 51: 
            { return CTokens.K_BOOL;
            } 
            // fall through
          case 152: break;
          case 52: 
            { return CTokens.K_ANGLE;
            } 
            // fall through
          case 153: break;
          case 53: 
            { return CTokens.K_EVENT;
            } 
            // fall through
          case 154: break;
          case 54: 
            { return CTokens.K_FLAGS;
            } 
            // fall through
          case 155: break;
          case 55: 
            { return CTokens.K_FLOAT;
            } 
            // fall through
          case 156: break;
          case 56: 
            { return CTokens.K_WHILE;
            } 
            // fall through
          case 157: break;
          case 57: 
            { return CTokens.K_SOUND;
            } 
            // fall through
          case 158: break;
          case 58: 
            { return CTokens.K_CLASS;
            } 
            // fall through
          case 159: break;
          case 59: 
            { return CTokens.K_CONST;
            } 
            // fall through
          case 160: break;
          case 60: 
            { return CTokens.K_BREAK;
            } 
            // fall through
          case 161: break;
          case 61: 
            { return CTokens.K_MODEL;
            } 
            // fall through
          case 162: break;
          case 62: 
            { return CTokens.K_COLOR;
            } 
            // fall through
          case 163: break;
          case 63: 
            { return CTokens.K_RANGE;
            } 
            // fall through
          case 164: break;
          case 64: 
            { return CTokens.K_INDEX;
            } 
            // fall through
          case 165: break;
          case 65: 
            { return CTokens.K_EXPORT;
            } 
            // fall through
          case 166: break;
          case 66: 
            { return CTokens.K_INLINE;
            } 
            // fall through
          case 167: break;
          case 67: 
            { return CTokens.K_SWITCH;
            } 
            // fall through
          case 168: break;
          case 68: 
            { return CTokens.K_STATIC;
            } 
            // fall through
          case 169: break;
          case 69: 
            { return CTokens.K_RESUME;
            } 
            // fall through
          case 170: break;
          case 70: 
            { return CTokens.K_RETURN;
            } 
            // fall through
          case 171: break;
          case 71: 
            { return CTokens.K_ANGLE3D;
            } 
            // fall through
          case 172: break;
          case 72: 
            { return CTokens.K_FLOAT3D;
            } 
            // fall through
          case 173: break;
          case 73: 
            { return CTokens.K_TEXTURE;
            } 
            // fall through
          case 174: break;
          case 74: 
            { return CTokens.K_DEFAULT;
            } 
            // fall through
          case 175: break;
          case 75: 
            { return CTokens.K_VIRTUAL;
            } 
            // fall through
          case 176: break;
          case 76: 
            { return CTokens.K_FEATURES;
            } 
            // fall through
          case 177: break;
          case 77: 
            { return CTokens.K_AUTOWAIT;
            } 
            // fall through
          case 178: break;
          case 78: 
            { return CTokens.K_AUTOCALL;
            } 
            // fall through
          case 179: break;
          case 79: 
            { return CTokens.K_CTSTRING;
            } 
            // fall through
          case 180: break;
          case 80: 
            { return CTokens.K_ANIMATION;
            } 
            // fall through
          case 181: break;
          case 81: 
            { return CTokens.K_FUNCTIONS;
            } 
            // fall through
          case 182: break;
          case 82: 
            { return CTokens.K_WAITEVENT;
            } 
            // fall through
          case 183: break;
          case 83: 
            { return CTokens.K_THUMBNAIL;
            } 
            // fall through
          case 184: break;
          case 84: 
            { return CTokens.K_OTHERWISE;
            } 
            // fall through
          case 185: break;
          case 85: 
            { return CTokens.K_COMPONENTS;
            } 
            // fall through
          case 186: break;
          case 86: 
            { return CTokens.K_PROCEDURES;
            } 
            // fall through
          case 187: break;
          case 87: 
            { return CTokens.K_PROPERTIES;
            } 
            // fall through
          case 188: break;
          case 88: 
            { return CTokens.K_CTFILENAME;
            } 
            // fall through
          case 189: break;
          case 89: 
            { return CTokens.K_FLOATQUAT3D;
            } 
            // fall through
          case 190: break;
          case 90: 
            { return CTokens.K_CANIMOBJECT;
            } 
            // fall through
          case 191: break;
          case 91: 
            { return CTokens.K_FLOATPLANE3D;
            } 
            // fall through
          case 192: break;
          case 92: 
            { return CTokens.K_CSOUNDOBJECT;
            } 
            // fall through
          case 193: break;
          case 93: 
            { return CTokens.K_CPLACEMENT3D;
            } 
            // fall through
          case 194: break;
          case 94: 
            { return CTokens.K_CMODELOBJECT;
            } 
            // fall through
          case 195: break;
          case 95: 
            { return CTokens.K_FLOATAABBOX3D;
            } 
            // fall through
          case 196: break;
          case 96: 
            { return CTokens.K_FLOATMATRIX3D;
            } 
            // fall through
          case 197: break;
          case 97: 
            { return CTokens.K_CTSTRINGTRANS;
            } 
            // fall through
          case 198: break;
          case 98: 
            { return CTokens.K_CENTITYPOINTER;
            } 
            // fall through
          case 199: break;
          case 99: 
            { return CTokens.K_CMODELINSTANCE;
            } 
            // fall through
          case 200: break;
          case 100: 
            { return CTokens.K_CTFILENAMENODEP;
            } 
            // fall through
          case 201: break;
          case 101: 
            { return CTokens.K_ILLUMINATIONTYPE;
            } 
            // fall through
          case 202: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
